// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
%goal Dummy;

%left ID;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */

Module = MODULE ID LCURLY Imports Declarations RCURLY;

/*Definition of Imports which are collection of Import*/
Imports = Import Imports
|
;

/*Definition of import*/
Import = IMPORT ID SEMICOLON;

Declarations = Declaration Declarations
|
;
Declaration = FunctionDeclaration
| FieldDeclaration
| TypeDeclaration
;

FunctionDeclaration = AccessibilitySpecifier TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY;

FieldDeclaration = AccessibilitySpecifier TypeName ID SEMICOLON;

TypeDeclaration = AccessibilitySpecifier TYPE ID EQL STRING_LITERAL SEMICOLON;

AccessibilitySpecifier = PUBLIC
|
;

TypeName = PrimitiveType
| ArrayType
| ID;

PrimitiveType = VOID
| BOOLEAN
| INT;

/*To remove reduce-reduce conflict for ID*/
ArrayType = PrimitiveType LBRACKET RBRACKET
| ArrayType LBRACKET RBRACKET
| ID LBRACKET RBRACKET;

ParameterList = Parameter ParameterTail
|
;

ParameterTail = COMMA Parameter ParameterTail
|
;
Parameter = TypeName ID;
StatementList = Statement StatementList
|
;

Statement = VariableDeclaration |
StatementBlock |
IfStatement |
WhileStatement |
BreakStatement |
ReturnStatement |
Expression SEMICOLON
;

VariableDeclaration = TypeName ID SEMICOLON;

StatementBlock = LCURLY StatementList RCURLY;

IfStatement = IF LPAREN Expression RPAREN Statement | IF LPAREN Expression RPAREN Statement ELSE Statement;

WhileStatement = WHILE LPAREN Expression RPAREN Statement;

BreakStatement = BREAK SEMICOLON;

ReturnStatement = RETURN OptionalExpression SEMICOLON;

OptionalExpression = Expression 
|
;


Expression = Assignment
| RHS;

Assignment = LHS EQL Expression;

LHS = ID
| ArrayAccess;

ArrayAccess = LHS LBRACKET Expression RBRACKET;

RHS = ArithmeticExpression ArithmeticTail;

ArithmeticTail = ComparisonOperator ArithmeticExpression
 |
 ;
 

ComparisonOperator = EQEQ
| NEQ
| LT
| LEQ
| GT
| GEQ
;

ArithmeticExpression = Term | ArithmeticExpression AdditiveOperator Term
;

AdditiveOperator = PLUS
| MINUS
;

Term = Term MultiplicativeOperator Factor
| Factor;

MultiplicativeOperator = TIMES
| DIV
| MOD
;

Factor = MINUS Factor
| PrimaryExpression
;

PrimaryExpression = LHS
| FunctionCall
| ArrayExpression
| STRING_LITERAL
| INT_LITERAL
| TRUE
| FALSE
| LPAREN Expression RPAREN
;

FunctionCall = ID LPAREN ExpressionList RPAREN;

ExpressionList = NExpressionList
|
;

ArrayExpression = LBRACKET NExpressionList RBRACKET;

NExpressionList = Expression | Expression COMMA NExpressionList;

/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. */	  
Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;
